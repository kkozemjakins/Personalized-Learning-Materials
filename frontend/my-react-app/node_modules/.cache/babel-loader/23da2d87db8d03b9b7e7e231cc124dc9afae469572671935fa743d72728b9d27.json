{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserTestResultsPage.jsx\",\n  _s = $RefreshSig$();\n// UserTestResultsPage.jsx\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useUserRoleAccess } from \"../Functions/apiUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserTestResultsPage() {\n  _s();\n  const checkUserRoleAccess = useUserRoleAccess(0);\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userId, setUserId] = useState(\"\");\n  const [userRole, setUserRole] = useState(\"\");\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Define a ref to track previous userId\n  const previousUserId = useRef(null);\n  useEffect(() => {\n    // Fetch user information from session storage or state\n    const userEmailFromStorage = sessionStorage.getItem(\"user_email\");\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    const userRoleFromStorage = sessionStorage.getItem(\"user_role\");\n    setUserEmail(userEmailFromStorage);\n    setUserId(userIdFromStorage);\n    setUserRole(userRoleFromStorage);\n    if (!checkUserRoleAccess() || !userId) {\n      setLoading(false);\n      return;\n    }\n\n    // Fetch user answers from the backend API only if userId has changed\n    if (userId !== previousUserId.current) {\n      setLoading(true);\n      fetch(`http://localhost:5000/user_answers/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user answers\");\n        }\n        return response.json();\n      }).then(data => {\n        setUserAnswers(data.userAnswers);\n        setLoading(false);\n      }).catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n      previousUserId.current = userId; // Update previousUserId ref\n    }\n  }, [userId, checkUserRoleAccess]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Group user answers by profession test ID\n  const groupedUserAnswers = {};\n  userAnswers.forEach(answer => {\n    if (!groupedUserAnswers[answer.prof_test_id]) {\n      groupedUserAnswers[answer.prof_test_id] = [];\n    }\n    groupedUserAnswers[answer.prof_test_id].push(answer);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container h-100\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row h-100\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Welcome to this User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"User Email: \", userEmail]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"User ID: \", userId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"User Role: \", userRole]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), Object.entries(groupedUserAnswers).map(([testId, answers]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: [\"Profession Test ID: \", testId]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: answers.map((answer, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Question: \", answer.question_text]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 45\n                  }, this), \", \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Level: \", answer.question_level]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 86\n                  }, this), \", \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"User Answer: \", answer.user_answer]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 125\n                  }, this), \", \", /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: [\"Correct/Incorrect: \", answer.correct_incorrect === 1 ? \"Correct\" : \"Incorrect\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 167\n                  }, this), index === answers.length - 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      children: \"Comment on Result:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 93,\n                      columnNumber: 53\n                    }, this), \" \", answer.comment_on_result]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 45\n                }, this)\n              }, answer.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 33\n            }, this)]\n          }, testId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(UserTestResultsPage, \"JS3sybMPjJy/dTcRUauMI4q+dEM=\", false, function () {\n  return [useUserRoleAccess];\n});\n_c = UserTestResultsPage;\nvar _c;\n$RefreshReg$(_c, \"UserTestResultsPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Link","useUserRoleAccess","jsxDEV","_jsxDEV","UserTestResultsPage","_s","checkUserRoleAccess","userEmail","setUserEmail","userId","setUserId","userRole","setUserRole","userAnswers","setUserAnswers","loading","setLoading","error","setError","previousUserId","userEmailFromStorage","sessionStorage","getItem","userIdFromStorage","userRoleFromStorage","current","fetch","then","response","ok","Error","json","data","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","message","groupedUserAnswers","forEach","answer","prof_test_id","push","className","Object","entries","map","testId","answers","index","question_text","question_level","user_answer","correct_incorrect","length","comment_on_result","id","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserTestResultsPage.jsx"],"sourcesContent":["// UserTestResultsPage.jsx\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useUserRoleAccess } from \"../Functions/apiUtils\";\r\n\r\nexport default function UserTestResultsPage() {\r\n    const checkUserRoleAccess = useUserRoleAccess(0);\r\n    const [userEmail, setUserEmail] = useState(\"\");\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [userRole, setUserRole] = useState(\"\");\r\n    const [userAnswers, setUserAnswers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    \r\n    // Define a ref to track previous userId\r\n    const previousUserId = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // Fetch user information from session storage or state\r\n        const userEmailFromStorage = sessionStorage.getItem(\"user_email\");\r\n        const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n        const userRoleFromStorage = sessionStorage.getItem(\"user_role\");\r\n    \r\n        setUserEmail(userEmailFromStorage);\r\n        setUserId(userIdFromStorage);\r\n        setUserRole(userRoleFromStorage);\r\n    \r\n        if (!checkUserRoleAccess() || !userId) {\r\n            setLoading(false);\r\n            return;\r\n        }\r\n    \r\n        // Fetch user answers from the backend API only if userId has changed\r\n        if (userId !== previousUserId.current) {\r\n            setLoading(true);\r\n            fetch(`http://localhost:5000/user_answers/${userId}`)\r\n                .then((response) => {\r\n                    if (!response.ok) {\r\n                        throw new Error(\"Failed to fetch user answers\");\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    setUserAnswers(data.userAnswers);\r\n                    setLoading(false);\r\n                })\r\n                .catch((error) => {\r\n                    setError(error);\r\n                    setLoading(false);\r\n                });\r\n            previousUserId.current = userId; // Update previousUserId ref\r\n        }\r\n    }, [userId, checkUserRoleAccess]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n    }\r\n\r\n    // Group user answers by profession test ID\r\n    const groupedUserAnswers = {};\r\n    userAnswers.forEach((answer) => {\r\n        if (!groupedUserAnswers[answer.prof_test_id]) {\r\n            groupedUserAnswers[answer.prof_test_id] = [];\r\n        }\r\n        groupedUserAnswers[answer.prof_test_id].push(answer);\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container h-100\">\r\n                <div className=\"row h-100\">\r\n                    <div className=\"col-12\">\r\n                        <h1>Welcome to this User</h1>\r\n                        <p>User Email: {userEmail}</p>\r\n                        <p>User ID: {userId}</p>\r\n                        <p>User Role: {userRole}</p>\r\n                        \r\n                        {/* Display user answers grouped by profession test */}\r\n                        {Object.entries(groupedUserAnswers).map(([testId, answers]) => (\r\n                            <div key={testId}>\r\n                                <h2>Profession Test ID: {testId}</h2>\r\n                                <ul>\r\n                                    {answers.map((answer, index) => (\r\n                                        <li key={answer.id}>\r\n                                            <ul>\r\n                                            <p>Question: {answer.question_text}</p>, <p>Level: {answer.question_level}</p>, <p>User Answer: {answer.user_answer}</p>, <p>Correct/Incorrect: {answer.correct_incorrect === 1 ? \"Correct\" : \"Incorrect\"}</p>\r\n                                            {index === answers.length - 1 && (\r\n                                                <div>\r\n                                                    <p>Comment on Result:</p> {answer.comment_on_result}\r\n                                                </div>\r\n                                            )}\r\n                                            </ul>\r\n                                        </li>\r\n                                    ))}\r\n                                </ul>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}