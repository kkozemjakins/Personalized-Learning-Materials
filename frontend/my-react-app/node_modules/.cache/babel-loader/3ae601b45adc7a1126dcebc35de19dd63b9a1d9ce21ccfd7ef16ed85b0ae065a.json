{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserCoursePage.jsx\",\n  _s = $RefreshSig$();\n//UserCoursePage.jsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport XmlViewer from 'react-xml-viewer'; // Change import to default\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recommendations = ({\n  resultId\n}) => {\n  _s();\n  const [recommendations, setRecommendations] = useState([]);\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    setUserId(userIdFromStorage);\n    const fetchRecommendations = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\n        const userXml = response.data.user_xmls;\n        // Parse XML string to XML document\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(userXml, 'text/xml');\n        // Extract text nodes\n        const recommendationNodes = xmlDoc.querySelectorAll('recommendation');\n        const recommendations = Array.from(recommendationNodes).map(node => node.textContent);\n        setRecommendations(recommendations);\n      } catch (error) {\n        console.error('Error fetching XML file:', error);\n      }\n    };\n    fetchRecommendations();\n  }, [resultId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: recommendations.map((recommendation, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: recommendation\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Recommendations, \"I58DqiBAvd3gxikgsOtXKTYxXEk=\");\n_c = Recommendations;\nexport default Recommendations;\nvar _c;\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"names":["React","useEffect","useState","axios","XmlViewer","jsxDEV","_jsxDEV","Recommendations","resultId","_s","recommendations","setRecommendations","userId","setUserId","userIdFromStorage","sessionStorage","getItem","fetchRecommendations","response","get","userXml","data","user_xmls","parser","DOMParser","xmlDoc","parseFromString","recommendationNodes","querySelectorAll","Array","from","map","node","textContent","error","console","children","recommendation","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserCoursePage.jsx"],"sourcesContent":["//UserCoursePage.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport XmlViewer from 'react-xml-viewer'; // Change import to default\r\n\r\nconst Recommendations = ({ resultId }) => {\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [userId, setUserId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    setUserId(userIdFromStorage);\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\r\n        const userXml = response.data.user_xmls;\r\n        // Parse XML string to XML document\r\n        const parser = new DOMParser();\r\n        const xmlDoc = parser.parseFromString(userXml, 'text/xml');\r\n        // Extract text nodes\r\n        const recommendationNodes = xmlDoc.querySelectorAll('recommendation');\r\n        const recommendations = Array.from(recommendationNodes).map(node => node.textContent);\r\n        setRecommendations(recommendations);\r\n      } catch (error) {\r\n        console.error('Error fetching XML file:', error);\r\n      }\r\n    };\r\n    fetchRecommendations();\r\n  }, [resultId]);\r\n\r\n  return (\r\n    <div>\r\n      {recommendations.map((recommendation, index) => (\r\n        <div key={index}>{recommendation}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendations;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMa,iBAAiB,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;IAC3DH,SAAS,CAACC,iBAAiB,CAAC;IAE5B,MAAMG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,sCAAqCL,iBAAkB,EAAC,CAAC;QAC3F,MAAMM,OAAO,GAAGF,QAAQ,CAACG,IAAI,CAACC,SAAS;QACvC;QACA,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;QAC9B,MAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACN,OAAO,EAAE,UAAU,CAAC;QAC1D;QACA,MAAMO,mBAAmB,GAAGF,MAAM,CAACG,gBAAgB,CAAC,gBAAgB,CAAC;QACrE,MAAMlB,eAAe,GAAGmB,KAAK,CAACC,IAAI,CAACH,mBAAmB,CAAC,CAACI,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,WAAW,CAAC;QACrFtB,kBAAkB,CAACD,eAAe,CAAC;MACrC,CAAC,CAAC,OAAOwB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDjB,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA;IAAA8B,QAAA,EACG1B,eAAe,CAACqB,GAAG,CAAC,CAACM,cAAc,EAAEC,KAAK,kBACzChC,OAAA;MAAA8B,QAAA,EAAkBC;IAAc,GAAtBC,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAuB,CACvC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CAjCIF,eAAe;AAAAoC,EAAA,GAAfpC,eAAe;AAmCrB,eAAeA,eAAe;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}