{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserTestPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserTestPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [profession, setProfession] = useState(null);\n  const [testQuestions, setTestQuestions] = useState([]);\n  useEffect(() => {\n    console.log(\"Fetching profession details for ID:\", id);\n    fetch(`http://localhost:5000/get_prof/${id}`).then(response => response.json()).then(data => {\n      console.log(\"Profession details fetched:\", data);\n      setProfession(data.professions); // Assuming the API returns profession details in a \"professions\" array\n    }).catch(error => console.error(\"Error fetching profession details:\", error));\n    console.log(\"Fetching test questions for profession ID:\", id);\n    fetch(`http://localhost:5000/get_test_questions_by_profession/${id}`).then(response => response.json()).then(data => {\n      console.log(\"Test questions fetched:\", data);\n      setTestQuestions(data.profTestCreatedQuestions);\n    }).catch(error => console.error(\"Error fetching test questions:\", error));\n  }, [id]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    // You can implement submission logic here, e.g., checking answers\n    console.log(\"Form submitted!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Profession Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), profession && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession ID: \", profession.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession Name: \", profession.profession_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", profession.profession_description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [testQuestions && testQuestions.map((question, index) =>\n      /*#__PURE__*/\n      // Add a check for testQuestions\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", index + 1, \": \", question.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: ['answer_variant1', 'answer_variant2', 'answer_variant3', 'answer_variant4'].map((variant, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `${question.question_id}_${variant}`,\n              name: `question_${question.question_id}`,\n              value: question[variant]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `${question.question_id}_${variant}`,\n              children: question[variant]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)]\n      }, question.question_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(UserTestPage, \"xYJTdCvMwJb16qbjSwmut5P9l+Y=\", false, function () {\n  return [useParams];\n});\n_c = UserTestPage;\nvar _c;\n$RefreshReg$(_c, \"UserTestPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","UserTestPage","_s","id","profession","setProfession","testQuestions","setTestQuestions","console","log","fetch","then","response","json","data","professions","catch","error","profTestCreatedQuestions","handleSubmit","event","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","profession_name","profession_description","onSubmit","map","question","index","variant","i","type","question_id","name","value","htmlFor","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserTestPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function UserTestPage() {\r\n  const { id } = useParams();\r\n  const [profession, setProfession] = useState(null);\r\n  const [testQuestions, setTestQuestions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching profession details for ID:\", id);\r\n    fetch(`http://localhost:5000/get_prof/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Profession details fetched:\", data);\r\n        setProfession(data.professions); // Assuming the API returns profession details in a \"professions\" array\r\n      })\r\n      .catch((error) => console.error(\"Error fetching profession details:\", error));\r\n\r\n    console.log(\"Fetching test questions for profession ID:\", id);\r\n    fetch(`http://localhost:5000/get_test_questions_by_profession/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Test questions fetched:\", data);\r\n        setTestQuestions(data.profTestCreatedQuestions);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching test questions:\", error));\r\n  }, [id]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // You can implement submission logic here, e.g., checking answers\r\n    console.log(\"Form submitted!\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <h2>Profession Details</h2>\r\n        {profession && (\r\n        <div>\r\n            <p>Profession ID: {profession.id}</p>\r\n            <p>Profession Name: {profession.profession_name}</p>\r\n            <p>Description: {profession.profession_description}</p>\r\n        </div>\r\n        )}\r\n\r\n        <h2>Test Questions</h2>\r\n        <form onSubmit={handleSubmit}>\r\n        {testQuestions && testQuestions.map((question, index) => ( // Add a check for testQuestions\r\n            <div key={question.question_id}>\r\n            <p>Question {index + 1}: {question.question}</p>\r\n            <div>\r\n                {['answer_variant1', 'answer_variant2', 'answer_variant3', 'answer_variant4'].map((variant, i) => (\r\n                <div key={i}>\r\n                    <input type=\"radio\" id={`${question.question_id}_${variant}`} name={`question_${question.question_id}`} value={question[variant]} />\r\n                    <label htmlFor={`${question.question_id}_${variant}`}>{question[variant]}</label>\r\n                </div>\r\n                ))}\r\n            </div>\r\n            </div>\r\n        ))}\r\n        <button type=\"submit\">Submit Answers</button>\r\n        </form>\r\n    </div>\r\n    );\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}