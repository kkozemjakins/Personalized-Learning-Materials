{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserCoursePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CoursePage = () => {\n  _s();\n  const [recommendations, setRecommendations] = useState([]);\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    setUserId(userIdFromStorage);\n    const fetchRecommendations = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\n        setRecommendations(response.data.user_xmls);\n      } catch (error) {\n        console.error('Error fetching XML files:', error);\n      }\n    };\n    fetchRecommendations();\n  }, []);\n  const parseXml = xmlData => {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n      const courseOutline = xmlDoc.getElementsByTagName('course_outline')[0];\n      const professionDescription = courseOutline.getElementsByTagName('profession_description')[0].textContent;\n      const topics = courseOutline.getElementsByTagName('topics')[0];\n      const generalComments = courseOutline.getElementsByTagName('general_comments')[0];\n      const improvementRecommendations = generalComments.getElementsByTagName('improvement_recommendations')[0].textContent;\n      let formattedText = `Java Developer Course Outline\\n\\n`;\n      formattedText += `Profession Description:\\n${professionDescription}\\n\\n`;\n      formattedText += `Topics:\\n`;\n      const topicNodes = topics.getElementsByTagName('topic');\n      for (let i = 0; i < topicNodes.length; i++) {\n        const topic = topicNodes[i];\n        const title = topic.getElementsByTagName('title')[0].textContent;\n        const theorySection = topic.getElementsByTagName('theory_section')[0];\n        const theoryDescription = theorySection.getElementsByTagName('description')[0].textContent;\n        const recommendations = Array.from(theorySection.getElementsByTagName('recommendation')).map(node => node.textContent);\n        const practicalTasks = Array.from(topic.getElementsByTagName('task')).map(node => node.textContent);\n        formattedText += `${title}\\n`;\n        formattedText += `Theory Section:\\n${theoryDescription}\\n`;\n        formattedText += `Recommendations:\\n${recommendations.join('\\n')}\\n`;\n        formattedText += `Practical Tasks:\\n${practicalTasks.join('\\n')}\\n\\n`;\n      }\n      formattedText += `General Comments:\\n${generalComments.getElementsByTagName('comment')[0].textContent}\\n\\n`;\n      formattedText += `Improvement Recommendations:\\n${improvementRecommendations}`;\n      return formattedText;\n    } catch (error) {\n      console.error('Error parsing XML:', error);\n      return 'Error parsing XML';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Course Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), recommendations && recommendations.map((xmlData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: parseXml(xmlData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(CoursePage, \"I58DqiBAvd3gxikgsOtXKTYxXEk=\");\n_c = CoursePage;\nexport default CoursePage;\nvar _c;\n$RefreshReg$(_c, \"CoursePage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","CoursePage","_s","recommendations","setRecommendations","userId","setUserId","userIdFromStorage","sessionStorage","getItem","fetchRecommendations","response","get","data","user_xmls","error","console","parseXml","xmlData","parser","DOMParser","xmlDoc","parseFromString","courseOutline","getElementsByTagName","professionDescription","textContent","topics","generalComments","improvementRecommendations","formattedText","topicNodes","i","length","topic","title","theorySection","theoryDescription","Array","from","map","node","practicalTasks","join","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserCoursePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst CoursePage = () => {\r\n  const [recommendations, setRecommendations] = useState([]);\r\n  const [userId, setUserId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    setUserId(userIdFromStorage);\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\r\n        setRecommendations(response.data.user_xmls);\r\n      } catch (error) {\r\n        console.error('Error fetching XML files:', error);\r\n      }\r\n    };\r\n    fetchRecommendations();\r\n  }, []);\r\n\r\n  const parseXml = (xmlData) => {\r\n    try {\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\r\n\r\n      const courseOutline = xmlDoc.getElementsByTagName('course_outline')[0];\r\n      const professionDescription = courseOutline.getElementsByTagName('profession_description')[0].textContent;\r\n      const topics = courseOutline.getElementsByTagName('topics')[0];\r\n      const generalComments = courseOutline.getElementsByTagName('general_comments')[0];\r\n      const improvementRecommendations = generalComments.getElementsByTagName('improvement_recommendations')[0].textContent;\r\n\r\n      let formattedText = `Java Developer Course Outline\\n\\n`;\r\n      formattedText += `Profession Description:\\n${professionDescription}\\n\\n`;\r\n      formattedText += `Topics:\\n`;\r\n\r\n      const topicNodes = topics.getElementsByTagName('topic');\r\n      for (let i = 0; i < topicNodes.length; i++) {\r\n        const topic = topicNodes[i];\r\n        const title = topic.getElementsByTagName('title')[0].textContent;\r\n        const theorySection = topic.getElementsByTagName('theory_section')[0];\r\n        const theoryDescription = theorySection.getElementsByTagName('description')[0].textContent;\r\n        const recommendations = Array.from(theorySection.getElementsByTagName('recommendation')).map(node => node.textContent);\r\n        const practicalTasks = Array.from(topic.getElementsByTagName('task')).map(node => node.textContent);\r\n\r\n        formattedText += `${title}\\n`;\r\n        formattedText += `Theory Section:\\n${theoryDescription}\\n`;\r\n        formattedText += `Recommendations:\\n${recommendations.join('\\n')}\\n`;\r\n        formattedText += `Practical Tasks:\\n${practicalTasks.join('\\n')}\\n\\n`;\r\n      }\r\n\r\n      formattedText += `General Comments:\\n${generalComments.getElementsByTagName('comment')[0].textContent}\\n\\n`;\r\n      formattedText += `Improvement Recommendations:\\n${improvementRecommendations}`;\r\n\r\n      return formattedText;\r\n    } catch (error) {\r\n      console.error('Error parsing XML:', error);\r\n      return 'Error parsing XML';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Course Page</h1>\r\n      {recommendations && recommendations.map((xmlData, index) => (\r\n        <div key={index}>\r\n          <pre>{parseXml(xmlData)}</pre>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoursePage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}