{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserCoursePage.jsx\",\n  _s = $RefreshSig$();\n//UserCoursePage.jsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recommendations = ({\n  resultId\n}) => {\n  _s();\n  const [recommendations, setRecommendations] = useState('');\n  const [userId, setUserId] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    setUserId(userIdFromStorage);\n    const fetchRecommendations = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\n        setRecommendations(response.data.user_xmls);\n      } catch (error) {\n        console.error('Error fetching XML file:', error);\n        setError('Error fetching XML file');\n      }\n    };\n    fetchRecommendations();\n  }, [resultId]);\n\n  // Parse XML string and format it for display as plain text\n  const formatXmlAsText = xmlString => {\n    if (!xmlString) return '';\n    // Replace '<' and '>' with HTML entities to prevent rendering as HTML\n    return xmlString.replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: formatXmlAsText(recommendations)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Recommendations, \"wI7eRjqoH+cjWD/DFwnI5bgZuD4=\");\n_c = Recommendations;\nexport default Recommendations;\nvar _c;\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Recommendations","resultId","_s","recommendations","setRecommendations","userId","setUserId","error","setError","userIdFromStorage","sessionStorage","getItem","fetchRecommendations","response","get","data","user_xmls","console","formatXmlAsText","xmlString","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserCoursePage.jsx"],"sourcesContent":["//UserCoursePage.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Recommendations = ({ resultId }) => {\r\n  const [recommendations, setRecommendations] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    setUserId(userIdFromStorage);\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\r\n        setRecommendations(response.data.user_xmls);\r\n      } catch (error) {\r\n        console.error('Error fetching XML file:', error);\r\n        setError('Error fetching XML file');\r\n      }\r\n    };\r\n    fetchRecommendations();\r\n  }, [resultId]);\r\n\r\n  // Parse XML string and format it for display as plain text\r\n  const formatXmlAsText = (xmlString) => {\r\n    if (!xmlString) return '';\r\n    // Replace '<' and '>' with HTML entities to prevent rendering as HTML\r\n    return xmlString.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {error ? (\r\n        <div>{error}</div>\r\n      ) : (\r\n        <pre>{formatXmlAsText(recommendations)}</pre>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendations;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMc,iBAAiB,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;IAC3DL,SAAS,CAACG,iBAAiB,CAAC;IAE5B,MAAMG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,sCAAqCL,iBAAkB,EAAC,CAAC;QAC3FL,kBAAkB,CAACS,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;MAC7C,CAAC,CAAC,OAAOT,KAAK,EAAE;QACdU,OAAO,CAACV,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDC,QAAQ,CAAC,yBAAyB,CAAC;MACrC;IACF,CAAC;IACDI,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMiB,eAAe,GAAIC,SAAS,IAAK;IACrC,IAAI,CAACA,SAAS,EAAE,OAAO,EAAE;IACzB;IACA,OAAOA,SAAS,CAACC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;EAC9D,CAAC;EAED,oBACErB,OAAA;IAAAsB,QAAA,EACGd,KAAK,gBACJR,OAAA;MAAAsB,QAAA,EAAMd;IAAK;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAElB1B,OAAA;MAAAsB,QAAA,EAAMH,eAAe,CAACf,eAAe;IAAC;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAC7C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CArCIF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAuCrB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}