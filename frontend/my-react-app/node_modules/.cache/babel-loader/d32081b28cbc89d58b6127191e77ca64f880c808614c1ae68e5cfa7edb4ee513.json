{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserCoursePage.jsx\",\n  _s = $RefreshSig$();\n//UserCoursePage.jsx\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser'; // Import ReactHtmlParser for parsing HTML/XML\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recommendations = ({\n  resultId\n}) => {\n  _s();\n  const [recommendations, setRecommendations] = useState('');\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    setUserId(userIdFromStorage);\n    const fetchRecommendations = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\n        setRecommendations(response.data.user_xmls);\n      } catch (error) {\n        console.error('Error fetching XML file:', error);\n      }\n    };\n    fetchRecommendations();\n  }, [resultId]);\n\n  // Function to parse XML and convert it to HTML\n  const parseXML = xmlString => {\n    // Assuming the XML string starts with '<' and ends with '>'\n    // Here, ReactHtmlParser will parse the XML string and convert it into HTML\n    return ReactHtmlParser(xmlString);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recommendations-container\",\n      children: parseXML(recommendations)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Recommendations, \"5mL1HjzwpMirHd1Wbn1viWwvbBc=\");\n_c = Recommendations;\nexport default Recommendations;\nvar _c;\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"names":["React","useEffect","useState","axios","ReactHtmlParser","jsxDEV","_jsxDEV","Recommendations","resultId","_s","recommendations","setRecommendations","userId","setUserId","userIdFromStorage","sessionStorage","getItem","fetchRecommendations","response","get","data","user_xmls","error","console","parseXML","xmlString","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserCoursePage.jsx"],"sourcesContent":["//UserCoursePage.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport ReactHtmlParser from 'react-html-parser'; // Import ReactHtmlParser for parsing HTML/XML\r\n\r\nconst Recommendations = ({ resultId }) => {\r\n  const [recommendations, setRecommendations] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    setUserId(userIdFromStorage);\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\r\n        setRecommendations(response.data.user_xmls);\r\n      } catch (error) {\r\n        console.error('Error fetching XML file:', error);\r\n      }\r\n    };\r\n    fetchRecommendations();\r\n  }, [resultId]);\r\n\r\n  // Function to parse XML and convert it to HTML\r\n  const parseXML = (xmlString) => {\r\n    // Assuming the XML string starts with '<' and ends with '>'\r\n    // Here, ReactHtmlParser will parse the XML string and convert it into HTML\r\n    return ReactHtmlParser(xmlString);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Display parsed recommendations */}\r\n      <div className=\"recommendations-container\">\r\n        {parseXML(recommendations)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendations;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,mBAAmB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMa,iBAAiB,GAAGC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;IAC3DH,SAAS,CAACC,iBAAiB,CAAC;IAE5B,MAAMG,oBAAoB,GAAG,MAAAA,CAAA,KAAY;MACvC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAE,sCAAqCL,iBAAkB,EAAC,CAAC;QAC3FH,kBAAkB,CAACO,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;MAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACDL,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMgB,QAAQ,GAAIC,SAAS,IAAK;IAC9B;IACA;IACA,OAAOrB,eAAe,CAACqB,SAAS,CAAC;EACnC,CAAC;EAED,oBACEnB,OAAA;IAAAoB,QAAA,eAEEpB,OAAA;MAAKqB,SAAS,EAAC,2BAA2B;MAAAD,QAAA,EACvCF,QAAQ,CAACd,eAAe;IAAC;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CAlCIF,eAAe;AAAAyB,EAAA,GAAfzB,eAAe;AAoCrB,eAAeA,eAAe;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}