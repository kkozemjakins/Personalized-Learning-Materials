{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserTestPage.jsx\",\n  _s = $RefreshSig$();\n//UserTestPage.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserTestPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [profession, setProfession] = useState(null);\n  const [testQuestions, setTestQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  useEffect(() => {\n    console.log(\"Fetching profession details for ID:\", id);\n    fetch(`http://localhost:5000/get_prof/${id}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch profession details');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Profession details fetched:\", data);\n      setProfession(data.professions); // Assuming the API returns profession details in a \"professions\" array\n    }).catch(error => console.error(\"Error fetching profession details:\", error));\n    console.log(\"Fetching test questions for profession ID:\", id);\n    fetch(`http://localhost:5000/get_test_questions_by_profession/${id}`).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch test questions');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(\"Test questions fetched:\", data);\n      setTestQuestions(data.profTestCreatedQuestions);\n    }).catch(error => console.error(\"Error fetching test questions:\", error));\n  }, [id]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Validate answers here\n    console.log(\"Submitted answers:\", answers);\n  };\n  const handleAnswerChange = (questionId, answer) => {\n    setAnswers({\n      ...answers,\n      [questionId]: answer\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Profession Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), profession && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession ID: \", profession.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession Name: \", profession.profession_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", profession.profession_description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [testQuestions.length > 0 ? testQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Question \", index + 1, \": \", question.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: ['answer_variant1', 'answer_variant2', 'answer_variant3', 'answer_variant4'].map((variant, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `${question.question_id}_${variant}`,\n              name: `question_${question.question_id}`,\n              value: question[variant],\n              onChange: () => handleAnswerChange(question.question_id, question[variant])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `${question.question_id}_${variant}`,\n              children: question[variant]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 21\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)]\n      }, question.question_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No test questions available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(UserTestPage, \"nXCHkbex4uTugbfg+JzMZHu1Ako=\", false, function () {\n  return [useParams];\n});\n_c = UserTestPage;\nvar _c;\n$RefreshReg$(_c, \"UserTestPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","UserTestPage","_s","id","profession","setProfession","testQuestions","setTestQuestions","answers","setAnswers","console","log","fetch","then","response","ok","Error","json","data","professions","catch","error","profTestCreatedQuestions","handleSubmit","event","preventDefault","handleAnswerChange","questionId","answer","children","fileName","_jsxFileName","lineNumber","columnNumber","profession_name","profession_description","onSubmit","length","map","question","index","variant","i","type","question_id","name","value","onChange","htmlFor","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserTestPage.jsx"],"sourcesContent":["//UserTestPage.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function UserTestPage() {\r\n  const { id } = useParams();\r\n  const [profession, setProfession] = useState(null);\r\n  const [testQuestions, setTestQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n\r\n  useEffect(() => {\r\n    console.log(\"Fetching profession details for ID:\", id);\r\n    fetch(`http://localhost:5000/get_prof/${id}`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch profession details');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Profession details fetched:\", data);\r\n        setProfession(data.professions); // Assuming the API returns profession details in a \"professions\" array\r\n      })\r\n      .catch((error) => console.error(\"Error fetching profession details:\", error));\r\n\r\n    console.log(\"Fetching test questions for profession ID:\", id);\r\n    fetch(`http://localhost:5000/get_test_questions_by_profession/${id}`)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch test questions');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(\"Test questions fetched:\", data);\r\n        setTestQuestions(data.profTestCreatedQuestions);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching test questions:\", error));\r\n  }, [id]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Validate answers here\r\n    console.log(\"Submitted answers:\", answers);\r\n  };\r\n\r\n  const handleAnswerChange = (questionId, answer) => {\r\n    setAnswers({\r\n      ...answers,\r\n      [questionId]: answer,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Profession Details</h2>\r\n      {profession && (\r\n        <div>\r\n          <p>Profession ID: {profession.id}</p>\r\n          <p>Profession Name: {profession.profession_name}</p>\r\n          <p>Description: {profession.profession_description}</p>\r\n        </div>\r\n      )}\r\n\r\n      <h2>Test Questions</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {testQuestions.length > 0 ? (\r\n          testQuestions.map((question, index) => (\r\n            <div key={question.question_id}>\r\n              <p>Question {index + 1}: {question.question}</p>\r\n              <div>\r\n                {['answer_variant1', 'answer_variant2', 'answer_variant3', 'answer_variant4'].map((variant, i) => (\r\n                  <div key={i}>\r\n                    <input\r\n                      type=\"radio\"\r\n                      id={`${question.question_id}_${variant}`}\r\n                      name={`question_${question.question_id}`}\r\n                      value={question[variant]}\r\n                      onChange={() => handleAnswerChange(question.question_id, question[variant])}\r\n                    />\r\n                    <label htmlFor={`${question.question_id}_${variant}`}>{question[variant]}</label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <p>No test questions available</p>\r\n        )}\r\n        <button type=\"submit\">Submit Answers</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}