{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserTestPage.jsx\",\n  _s = $RefreshSig$();\n//UserTestPage.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"react-router\";\nimport { useUserRoleAccess } from \"../Functions/apiUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UserTestPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [userId, setUserId] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userRole, setUserRole] = useState(\"\");\n  const [profession, setProfession] = useState(null);\n  const [testQuestions, setTestQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [mark, setMark] = useState(null);\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const location = useLocation();\n  const userData = location.state || {};\n  const {\n    email,\n    id: userIdFromLocation,\n    role\n  } = userData;\n  const checkUserRoleAccess = useUserRoleAccess(0);\n  useEffect(() => {\n    if (!checkUserRoleAccess()) {\n      return;\n    }\n    const userEmailFromStorage = sessionStorage.getItem(\"user_email\");\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    const userRoleFromStorage = sessionStorage.getItem(\"user_role\");\n    if (userEmailFromStorage && userIdFromStorage && userRoleFromStorage) {\n      setUserEmail(userEmailFromStorage);\n      setUserId(userIdFromStorage);\n      setUserRole(userRoleFromStorage);\n    } else {\n      setError(\"User data not found\");\n      setLoading(false);\n      return;\n    }\n    if (!profession || testQuestions.length === 0) {\n      Promise.all([fetch(`http://localhost:5000/get_prof/${id}`).then(response => response.json()), fetch(`http://localhost:5000/get_test_questions_by_profession/${id}`).then(response => response.json())]).then(([professionData, testQuestionsData]) => {\n        setProfession(professionData.profession);\n        setTestQuestions(testQuestionsData);\n        setLoading(false);\n      }).catch(error => {\n        setError(\"Error fetching data. Please try again later.\");\n        setLoading(false);\n      });\n    } else {\n      setLoading(false);\n    }\n  }, [id, userIdFromLocation, email, role, checkUserRoleAccess, profession, testQuestions]);\n  const handleAnswerChange = (questionIndex, selectedAnswer) => {\n    setAnswers({\n      ...answers,\n      [questionIndex]: selectedAnswer\n    });\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    let correctAnswers = 0;\n    testQuestions.forEach((question, index) => {\n      if (answers[index] === question.correct_answer) {\n        correctAnswers++;\n      }\n    });\n    const calculatedMark = Math.round(correctAnswers / testQuestions.length * 100);\n    const userAnswersData = testQuestions.map((question, index) => ({\n      prof_test_id: id,\n      user_id: userId,\n      questions_id: question.question_id,\n      user_answer: answers[index] || \"\" // If user didn't answer, save an empty string\n    }));\n    fetch(\"http://localhost:5000/save_user_answers\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userAnswersData)\n    }).then(response => response.json()).then(userAnswersResponse => {\n      console.log(\"User answers saved:\", userAnswersResponse);\n\n      // Once user answers are saved, submit test results\n      const testData = {\n        prof_test_id: id,\n        user_id: userId,\n        mark: calculatedMark,\n        correct_answers_amount: correctAnswers,\n        incorrect_answers_amount: testQuestions.length - correctAnswers\n      };\n      fetch(\"http://localhost:5000/submit_test_results\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(testData)\n      }).then(response => response.json()).then(testResultsResponse => {\n        console.log(\"Test results submitted:\", testResultsResponse);\n        setMark(calculatedMark);\n        setCorrectAnswersCount(correctAnswers);\n        setSubmitted(true);\n      }).catch(error => {\n        console.error(\"Error submitting test results:\", error);\n      });\n    }).catch(error => {\n      console.error(\"Error saving user answers:\", error);\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome to this User, \", userEmail]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User Role: \", userRole]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), profession && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Profession Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession ID: \", profession.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Profession Name: \", profession.profession_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", profession.profession_description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Test Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [testQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [index + 1, \". \", question.question, \" Level: \", question.level_of_question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: Object.values(question).slice(0, 4).map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              style: {\n                color: submitted && option === question.correct_answer ? \"green\" : submitted && answers[index] !== option ? \"red\" : \"inherit\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: `question${index}`,\n                value: option,\n                checked: answers[index] === option,\n                onChange: () => handleAnswerChange(index, option),\n                disabled: submitted\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 21\n              }, this), option]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this), submitted && answers[index] !== option && option === question.correct_answer && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"green\"\n              },\n              children: \" \\u2713\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 21\n            }, this), submitted && answers[index] === option && option !== question.correct_answer && /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"red\"\n              },\n              children: \" x\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 21\n            }, this)]\n          }, optionIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: submitted,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), mark !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Mark: \", mark, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Correct Answers: \", correctAnswersCount, \"/\", testQuestions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(UserTestPage, \"XleeGG3R3Pxp8BIAKSsdS1Ongvo=\", false, function () {\n  return [useParams, useLocation, useUserRoleAccess];\n});\n_c = UserTestPage;\nvar _c;\n$RefreshReg$(_c, \"UserTestPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useUserRoleAccess","jsxDEV","_jsxDEV","UserTestPage","_s","id","userId","setUserId","userEmail","setUserEmail","userRole","setUserRole","profession","setProfession","testQuestions","setTestQuestions","answers","setAnswers","mark","setMark","correctAnswersCount","setCorrectAnswersCount","submitted","setSubmitted","loading","setLoading","error","setError","location","userData","state","email","userIdFromLocation","role","checkUserRoleAccess","userEmailFromStorage","sessionStorage","getItem","userIdFromStorage","userRoleFromStorage","length","Promise","all","fetch","then","response","json","professionData","testQuestionsData","catch","handleAnswerChange","questionIndex","selectedAnswer","handleSubmit","event","preventDefault","correctAnswers","forEach","question","index","correct_answer","calculatedMark","Math","round","userAnswersData","map","prof_test_id","user_id","questions_id","question_id","user_answer","method","headers","body","JSON","stringify","userAnswersResponse","console","log","testData","correct_answers_amount","incorrect_answers_amount","testResultsResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","profession_name","profession_description","onSubmit","level_of_question","Object","values","slice","option","optionIndex","style","color","type","name","value","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserTestPage.jsx"],"sourcesContent":["//UserTestPage.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, useLocation } from \"react-router\";\r\nimport { useUserRoleAccess } from \"../Functions/apiUtils\";\r\n\r\nexport default function UserTestPage() {\r\n  const { id } = useParams();\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const [userRole, setUserRole] = useState(\"\");\r\n  const [profession, setProfession] = useState(null);\r\n  const [testQuestions, setTestQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [mark, setMark] = useState(null);\r\n  const [correctAnswersCount, setCorrectAnswersCount] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const location = useLocation();\r\n  const userData = location.state || {};\r\n  const { email, id: userIdFromLocation, role } = userData;\r\n  const checkUserRoleAccess = useUserRoleAccess(0);\r\n\r\n  useEffect(() => {\r\n    if (!checkUserRoleAccess()) {\r\n      return;\r\n    }\r\n\r\n    const userEmailFromStorage = sessionStorage.getItem(\"user_email\");\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    const userRoleFromStorage = sessionStorage.getItem(\"user_role\");\r\n\r\n    if (userEmailFromStorage && userIdFromStorage && userRoleFromStorage) {\r\n      setUserEmail(userEmailFromStorage);\r\n      setUserId(userIdFromStorage);\r\n      setUserRole(userRoleFromStorage);\r\n    } else {\r\n      setError(\"User data not found\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    if (!profession || testQuestions.length === 0) {\r\n      Promise.all([\r\n        fetch(`http://localhost:5000/get_prof/${id}`).then((response) =>\r\n          response.json()\r\n        ),\r\n        fetch(\r\n          `http://localhost:5000/get_test_questions_by_profession/${id}`\r\n        ).then((response) => response.json()),\r\n      ])\r\n        .then(([professionData, testQuestionsData]) => {\r\n          setProfession(professionData.profession);\r\n          setTestQuestions(testQuestionsData);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          setError(\"Error fetching data. Please try again later.\");\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  }, [id, userIdFromLocation, email, role, checkUserRoleAccess, profession, testQuestions]);\r\n\r\n  const handleAnswerChange = (questionIndex, selectedAnswer) => {\r\n    setAnswers({\r\n      ...answers,\r\n      [questionIndex]: selectedAnswer,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let correctAnswers = 0;\r\n\r\n    testQuestions.forEach((question, index) => {\r\n      if (answers[index] === question.correct_answer) {\r\n        correctAnswers++;\r\n      }\r\n    });\r\n\r\n    const calculatedMark = Math.round((correctAnswers / testQuestions.length) * 100);\r\n\r\n    const userAnswersData = testQuestions.map((question, index) => ({\r\n      prof_test_id: id,\r\n      user_id: userId,\r\n      questions_id: question.question_id,\r\n      user_answer: answers[index] || \"\", // If user didn't answer, save an empty string\r\n    }));\r\n\r\n    fetch(\"http://localhost:5000/save_user_answers\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userAnswersData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((userAnswersResponse) => {\r\n        console.log(\"User answers saved:\", userAnswersResponse);\r\n\r\n        // Once user answers are saved, submit test results\r\n        const testData = {\r\n          prof_test_id: id,\r\n          user_id: userId,\r\n          mark: calculatedMark,\r\n          correct_answers_amount: correctAnswers,\r\n          incorrect_answers_amount: testQuestions.length - correctAnswers,\r\n        };\r\n\r\n        fetch(\"http://localhost:5000/submit_test_results\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(testData),\r\n        })\r\n          .then((response) => response.json())\r\n          .then((testResultsResponse) => {\r\n            console.log(\"Test results submitted:\", testResultsResponse);\r\n            setMark(calculatedMark);\r\n            setCorrectAnswersCount(correctAnswers);\r\n            setSubmitted(true);\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error submitting test results:\", error);\r\n          });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error saving user answers:\", error);\r\n      });\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Welcome to this User, {userEmail}</h1>\r\n      <p>User ID: {userId}</p>\r\n      <p>User Role: {userRole}</p>\r\n      {profession && (\r\n        <div>\r\n          <h2>Profession Details</h2>\r\n          <p>Profession ID: {profession.id}</p>\r\n          <p>Profession Name: {profession.profession_name}</p>\r\n          <p>Description: {profession.profession_description}</p>\r\n        </div>\r\n      )}\r\n\r\n      <h2>Test Questions</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {testQuestions.map((question, index) => (\r\n          <div key={index}>\r\n            <p>\r\n              {index + 1}. {question.question} Level: {question.level_of_question}\r\n            </p>\r\n            <ul>\r\n              {Object.values(question).slice(0, 4).map((option, optionIndex) => (\r\n                <li key={optionIndex}>\r\n                  <label\r\n                    style={{\r\n                      color:\r\n                        submitted && option === question.correct_answer\r\n                          ? \"green\"\r\n                          : submitted && answers[index] !== option\r\n                          ? \"red\"\r\n                          : \"inherit\",\r\n                    }}\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      name={`question${index}`}\r\n                      value={option}\r\n                      checked={answers[index] === option}\r\n                      onChange={() => handleAnswerChange(index, option)}\r\n                      disabled={submitted}\r\n                    />\r\n                    {option}\r\n                  </label>\r\n                  {submitted && answers[index] !== option && option === question.correct_answer && (\r\n                    <span style={{ color: \"green\" }}> ✓</span>\r\n                  )}\r\n                  {submitted && answers[index] === option && option !== question.correct_answer && (\r\n                    <span style={{ color: \"red\" }}> x</span>\r\n                  )}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ))}\r\n        <button type=\"submit\" disabled={submitted}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n\r\n      {mark !== null && (\r\n        <div>\r\n          <h2>Test Result</h2>\r\n          <p>Mark: {mark}%</p>\r\n          <p>Correct Answers: {correctAnswersCount}/{testQuestions.length}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}