{"ast":null,"code":"var _jsxFileName = \"D:\\\\PiereLV\\\\PythonEdSystem\\\\FlaskProject\\\\Personalized learning materials\\\\frontend\\\\my-react-app\\\\src\\\\components\\\\pages\\\\User\\\\UserCoursePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recommendations = ({\n  resultId\n}) => {\n  _s();\n  const [recommendations, setRecommendations] = useState('');\n  const [userId, setUserId] = useState('');\n  useEffect(() => {\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\n    setUserId(userIdFromStorage);\n    const fetchRecommendations = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\n        setRecommendations(response.data.user_xmls);\n      } catch (error) {\n        console.error('Error fetching XML file:', error);\n      }\n    };\n    fetchRecommendations();\n  }, [resultId]);\n  const parseXml = xmlData => {\n    // Parse the XML string into an XML document\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\n\n    // Extract information from the XML document\n    const courseOutline = xmlDoc.getElementsByTagName('course_outline')[0];\n    const professionDescription = courseOutline.getElementsByTagName('profession_description')[0];\n    const topics = courseOutline.getElementsByTagName('topics')[0];\n    const generalComments = courseOutline.getElementsByTagName('general_comments')[0];\n    const improvementRecommendations = generalComments.getElementsByTagName('improvement_recommendations')[0];\n\n    // Generate the formatted text\n    let formattedText = `Java Developer Course Outline\\n\\n`;\n    formattedText += `Profession Description:\\n${professionDescription.textContent}\\n\\n`;\n    formattedText += `Topics:\\n`;\n\n    // Iterate over each topic\n    const topicNodes = topics.getElementsByTagName('topic');\n    for (let i = 0; i < topicNodes.length; i++) {\n      const topic = topicNodes[i];\n      const title = topic.getElementsByTagName('title')[0].textContent;\n      const theorySection = topic.getElementsByTagName('theory_section')[0];\n      const theoryDescription = theorySection.getElementsByTagName('description')[0].textContent;\n      const recommendations = Array.from(theorySection.getElementsByTagName('recommendation')).map(node => node.textContent);\n      const practicalTasks = Array.from(topic.getElementsByTagName('task')).map(node => node.textContent);\n      formattedText += `${title}\\n`;\n      formattedText += `Theory Section:\\n${theoryDescription}\\n`;\n      formattedText += `Recommendations:\\n${recommendations.join('\\n')}\\n`;\n      formattedText += `Practical Tasks:\\n${practicalTasks.join('\\n')}\\n\\n`;\n    }\n\n    // Add general comments and improvement recommendations\n    formattedText += `General Comments:\\n${generalComments.getElementsByTagName('comment')[0].textContent}\\n\\n`;\n    formattedText += `Improvement Recommendations:\\n${improvementRecommendations.textContent}`;\n    return formattedText;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: recommendations && recommendations.map((xmlData, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: parseXml(xmlData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Recommendations, \"5mL1HjzwpMirHd1Wbn1viWwvbBc=\");\n_c = Recommendations;\nexport default Recommendations;\nvar _c;\n$RefreshReg$(_c, \"Recommendations\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Recommendations","resultId","_s","recommendations","setRecommendations","userId","setUserId","userIdFromStorage","sessionStorage","getItem","fetchRecommendations","response","get","data","user_xmls","error","console","parseXml","xmlData","parser","DOMParser","xmlDoc","parseFromString","courseOutline","getElementsByTagName","professionDescription","topics","generalComments","improvementRecommendations","formattedText","textContent","topicNodes","i","length","topic","title","theorySection","theoryDescription","Array","from","map","node","practicalTasks","join","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/PiereLV/PythonEdSystem/FlaskProject/Personalized learning materials/frontend/my-react-app/src/components/pages/User/UserCoursePage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Recommendations = ({ resultId }) => {\r\n  const [recommendations, setRecommendations] = useState('');\r\n  const [userId, setUserId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const userIdFromStorage = sessionStorage.getItem(\"user_id\");\r\n    setUserId(userIdFromStorage);\r\n\r\n    const fetchRecommendations = async () => {\r\n      try {\r\n        const response = await axios.get(`http://localhost:5000/get_user_xml/${userIdFromStorage}`);\r\n        setRecommendations(response.data.user_xmls);\r\n      } catch (error) {\r\n        console.error('Error fetching XML file:', error);\r\n      }\r\n    };\r\n    fetchRecommendations();\r\n  }, [resultId]);\r\n\r\n  const parseXml = (xmlData) => {\r\n    // Parse the XML string into an XML document\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(xmlData, 'text/xml');\r\n\r\n    // Extract information from the XML document\r\n    const courseOutline = xmlDoc.getElementsByTagName('course_outline')[0];\r\n    const professionDescription = courseOutline.getElementsByTagName('profession_description')[0];\r\n    const topics = courseOutline.getElementsByTagName('topics')[0];\r\n    const generalComments = courseOutline.getElementsByTagName('general_comments')[0];\r\n    const improvementRecommendations = generalComments.getElementsByTagName('improvement_recommendations')[0];\r\n\r\n    // Generate the formatted text\r\n    let formattedText = `Java Developer Course Outline\\n\\n`;\r\n    formattedText += `Profession Description:\\n${professionDescription.textContent}\\n\\n`;\r\n    formattedText += `Topics:\\n`;\r\n\r\n    // Iterate over each topic\r\n    const topicNodes = topics.getElementsByTagName('topic');\r\n    for (let i = 0; i < topicNodes.length; i++) {\r\n      const topic = topicNodes[i];\r\n      const title = topic.getElementsByTagName('title')[0].textContent;\r\n      const theorySection = topic.getElementsByTagName('theory_section')[0];\r\n      const theoryDescription = theorySection.getElementsByTagName('description')[0].textContent;\r\n      const recommendations = Array.from(theorySection.getElementsByTagName('recommendation')).map(node => node.textContent);\r\n      const practicalTasks = Array.from(topic.getElementsByTagName('task')).map(node => node.textContent);\r\n\r\n      formattedText += `${title}\\n`;\r\n      formattedText += `Theory Section:\\n${theoryDescription}\\n`;\r\n      formattedText += `Recommendations:\\n${recommendations.join('\\n')}\\n`;\r\n      formattedText += `Practical Tasks:\\n${practicalTasks.join('\\n')}\\n\\n`;\r\n    }\r\n\r\n    // Add general comments and improvement recommendations\r\n    formattedText += `General Comments:\\n${generalComments.getElementsByTagName('comment')[0].textContent}\\n\\n`;\r\n    formattedText += `Improvement Recommendations:\\n${improvementRecommendations.textContent}`;\r\n\r\n    return formattedText;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {recommendations && recommendations.map((xmlData, index) => (\r\n        <div key={index}>\r\n          <pre>{parseXml(xmlData)}</pre>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recommendations;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}